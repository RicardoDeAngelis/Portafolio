/*
Unidades de medida y colores

Hay varias unidades de medida con las que se puede trabajar en CSS: %, em, rem, px, pt, fr, vw, vh
Las medidas más comunes y utilizadas son los pixeles. Un pixel es la menor unidad homogénea en color que forma parte de una imagen digital. Es la unidad más práctica y fácil de utilizar y manipular, y es la que utilizaremos mayormente en este curso.

Los colores en CSS pueden ser representados de al menos tres formas diferentes:

    Representados con palabras claves para cada color, como: red, green, blue, pink, yellow, black, etc.
    Usando la composición de tres colores (rojo, verde y azul): para esto podemos usar notación exadecimal o las funciones rgb() y rgba().
    Usando la composición mediante valores de Matiz, Saturación y Luminosidad con: hls() y hlsa().

Con respecto a los valores hexadecimales, cada color está representado por 6 digitos, que representan 3 pares de hexadecimales: FF - FF - FF (rojo, verde y azul), en el que cada par puede tomar valores hexadecimales entre 00 y FF. Cada uno equivale a valores decimales entre 0 y 255, donde 0 es la ausencia de ese color y 255 la mayor cantidad disponible. De esta manera cada color se forma por la combinación de diferentes proporciones de rojo, verde y azul.

    #000000 es equivalente a Negro
    #FF0000 es equivalente a Rojo
    #00FF00 es equivalente a Verde
    #0000FF es equivalente a Azul
    #FFFFFF es equivalente a Blanco



display inline:acomoda los elementos en linea
display block:acomoda los elementos en lista
display  inline-blok:combina los los display
display flex ,gred;mas modermo

los estilos inline pesan mas que los estilos insertasdos por etiquetas styles y las eltiquetas styles y link 
primero tomara la que este primero y sera pisada si es que hay otra igual


Backgrounds de color e imagen

Algunas de las propiedades de css relacionadas con la apariencia del fondo de los elementos son:

    background: con la que se puede indicar un color, o usada de manera extendida, puede incluir color de fondo, url de la imagen, posición y modo de repetición de la imagen.
    background-image: contiene la url que se usará como fondo del elemento.
    background-color: indica el color de fondo, se puede usar en combinación con la imagen.
    background-size: se puede indicar en valores de alto y ancho o en alguna de las palabras claves permitidas: cover o contain.
    background-position: indica la posición de la imagen dentro del elemento, puede indicarse en unidades o en palabras claves como center, left, top y right.
    background-repeat: indica el método de repetición de la imagen de fondo, puede ser: repeat, repeat-x, repeat-y o no-repeat.


    Bordes

Todos los elementos html admiten la proipiedad de css border, que define la apariencia que tendrá el contorno del componente.
El borde puede ser de muchos estilos, y al igual que las propiedades margin y padding que aprenderás más adelante, a los bordes se les puede colocar estilos tanto de forma general con la propiedad border, como de acuerdo al lado del elemento que se indique: border-top, border-right, border-bottom y border-left.

Con la propiedad boder-radius se define el redondeado de las esquinas de los bordes.


Márgenes

Los márgenes en CSS son el espacio que separa a los elementos html entre sí. Hay elementos de html que traen márgenes predefinidos (poe defecto) en los estilos propios del navegador como el caso de: body, h1, h2, h3, h4, h5, h6, ol, ul, li, p, y muchos otros.

Cuando hay dos márgenes de elementos diferentes que colindan entre sí, se presenta una situación llamada ““margin collapsing”” en la que el mayor margen de los dos se superpone al otro.

Se puede asignar una medida de margin para los cuatro lados del elemento, o márgenes individuales para cada uno de los lados con: margin-top, margin-right, margin-bottom y margin-left.

Se puede centrar un elemento html colocándole el valor de margin: 0 auto, cuando dicho elemento tiene display block.


Rellenos

Así como el margen separa a los elementos html entre sí, la propiedad padding de relleno, permite definir una separación entre el contenido interno y el borde de un elemento.

Al inspeccionar los elementos html en el navegador, se puede apreciar el margin con color naranja y el padding con color verde.

Una forma de identificar cuándo es mejor usar margin o padding en un elemento, es evaluando la necesidad de usar borde o background, ya que son éstos: el borde y el background, los que realmente diferencian el uso de uno u otro.


Modelo de caja

El modelo de caja es un concepto teórico de css que representa a cada elemento html en base sus propiedades de: margin, border, padding y dimensiones (alto y ancho).
Para visualizar un elemento html en su representación como modelo de caja debemos irnos a la parte baja de la sección styles del inspector de elementos, o en la sección llamada Computed.

En el modelo de caja, el ancho total de un elemento html equivale a la sumatoria de los valores de: width, padding-left, padding-right, border-left-width, border-right-width. De manera similar aplica para el alto total de cada elemento. Aunque margin-left y margin-right, forman parte del modelo de caja, no se incluyen para el calculo del ancho total.

Con la propiedad box-sizing, y en particular con el valor border-box de esta propiedad, podemos modificar el comportamiento del modelo de caja para que nuestro elemento nunca supere el tamaño máximo que le hayamos definido en width y height. Esta es la opción recomendad para trabajar.


Tipos de display

Display es la propiedad de css que indica cómo debe ser mostrado un elemento html. Todos los elementos tienen algún tipo de display. Si un elemento no se ve en pantalla es porque segurmanete su display es none.

Los valores más comunes que puede recibir la propiedad display son:

    block: el elemento intenta abarcar todo el ancho posible.
    inline: reduce su tamaño exclusivamente hasta lo que abarca su contenido, descartando las propiedades width y height.
    inline-block: combina lo mejor de block e inline, ya que respeta las dimensiones indicadas en las propiedades width y height, pero coloca el elemento en línea (al costado) de elementos hermanos que también tengan display: inline o inline-block.
    flex: asume algunas propiedades por defecto que favorecen la alineación de los elementos internos.
    grid: similar a flex, asume algunas propiedades por defecto organizando los contenidos en filas y columnas.
    none: oculta el elemento.


    Propiedades de flexbox

Flexbox se refiere al tipo de display en css que permite un manejo flexible de la alineación, dimensionamiento y distribución de elementos html.

Esta propiedad se aplica a un elemento padre, pero va a afectar principalmente a sus elementos hijos directos. Por defecto, los elementos internos quedan alineados unos seguidos de los otros. El comportamiento del modelo de caja de estos elementos hijos también se ha modificado, ya que pierden el efecto de su propiedad margin.

Los elementos hijos de un padre con propiedad display: flex tienen a su disposición algunas nuevas propiedades que aportan mayor flexibilidad a su comportamiento. Una de estas propiedades es flex-shrink que, junto a la propiedad flex-wrap del padre, permite adaptar y distribuir los elementos de manera dinámica en el espacio horizontal disponible hasta ocupar todo el espacio, y luego pasar a ocupar dinamicamente las siguiente filas hacia abajo.

Alineando elementos de forma horizontal

La propiedad de css que nos permite definir la forma en que se alinearán o distribuirán los hijos de un elemento al que se le ha asignado un display flex es: justify-content. Y puede tomar entre otros valores, los siguientes:

    flex-start: para alinear todos los elementos hacia el inicio del espacio disponible.
    flex-end: para alinear todos los elementos hacia el final, a la derecha.
    center: para alinear todos los elementos al centro del espacio disponible.
    space-between: para distribuir los elementos con un espacio proporcional e igual entre ellos.
    space-evenly: para distribuir los elementos con un espacio proporcional e igual entre ellos (incluyendo el primer y último elementos con respecto a los extremos del espacio disponible).
    space-around: similar a space-evenly pero tanto en el primero como en el último elemento, el espacio hacia los extremos es la mitad del espacio usado entre los elementos.

Alineando elementos de forma vertical

Similar a como sucede con justify-content, es posible alinear y distribuir los elementos internos en el espacio vertical disponible usando la propiedad align-items, que puede tomar también los valores de: flex-start, flex-end y center.

Algo que es muy importante y se debe tener en cuenta a la hora de usar align-items y justify-content es que dependiendo de la propiedad flex-direction que se haya definido, el efecto de ambos se invierte, no en cuanto a sus elementos internos, sino en cuanto a si se debe usar uno u otro de manera vertical u horizontal.

IMPORTANTE: Cuando la propiedad flex-direction se ha definido como column, la propiedad justify-content ya no va a aplicar sobre la alineación horizontal, sino sobre la vertical. Y align-items ya no aplicaría sobre la alineación vertical sino la horizontal. Se intercambian sus efectos.

Para centrar completamente los elementos internos de manera vertical y horizontal en su elemento padre, debemos usar el valor center en ambas propiedades.


 reglas :
selectores: como indentificar elementos html
declaraciones:todo lo que hacemos con ese selector
propiedades:propiedas particulares q podemos hacer con los elementos
valores:cosas q se esperaran recibir como variables las propiedas para actuar de forma correcta
 */

 /* una regla es todo esto */
/*header, header  es un selector, {*/
 /* el bloque de codigo es una declaracion,backgroun(color de fondo) es una propiedad, green es un valor  */
 /* green es una palabre clave para representar colores */
 /* background: green; */
/* } */
/* selector de etiqueta  header-section-article-nav*/
/* selector descendente ->body->div->nav->ol->li->a */
/* selector de clase(una clase es un atributo adentro html
 estas clases pueden ser atrinutis de distintas etiquetas)
 selectoir de  id(los elementos id son unicos dentro del webside se los llama con un nuemral (#) */
/* el selector de clase se identifica con un  punto(.) */

/* reglas
selectores
declaraciones
propiedades
valores */


/* seletor de etiqueta  header - section - article - nav */
/* header {
  background: pink; color de fondo
  color: red color de texto
} */

/* selector descendente  */
/* body header div nav ol li a  */

/* selector de clase . */

/* .link */

/* selector de id # */
/* #portafolio */



/* gris oscuro = #1d252c */
/* gris claro = #626262 */
/* background gris = #1b2127 */
/* celeste = #026fff */

body {
  /* fuente todo se heredara a sus hijos */
    font-family: 'Source Sans Pro', sans-serif;
    margin:0;
  }
  
  h1, 
  h2,
  h3,
  h4,
  h5,
  h6{
    font-family: 'Fjalla One', sans-serif;
    /* peso de fuente desde 400( palabra clave normal)a 900 */
    font-weight: normal;
    /* font-style: italic;  stylos de fuentes*/
  }
  
  h1 {
    /* tamaño de fuente */
    font-size: 40px;
    /* alto de linea del h1 */
    line-height: 1.5; 
    /* separecion de letras */
    letter-spacing: -.2px;
    /*  */
    color: white;
    /* todos los margenes: top, right, botton, left */
    margin: 0;
    /* margin: 100px 150px 70px 30px; */
    /* text-transform: uppercase; tranformar letras*/
    /* text-decoration: dashed;  decorar texto (underline-subrallado)*/
  }
  /* color para las palabras en strong */
  h1 strong {
    color: #026fff ;
  }
  h2 {
    color: #026fff;
    text-transform: uppercase;
    font-family: 'Source Sans Pro', sans-serif;
    font-weight: bold;
    font-size: 24px;
    margin-bottom: 40px;
  }
  /* asignando tamaño fijo al area del hero */
  .hero {
    height: 300px;
    /* background-image: url('../images/hero.jpg'); */
    background-color: #1b2127;
    /* background-size: 500px 300px; tamaño a la imagen*/
    /* background-repeat: no-repeat;  para que no se repitan las imagenes*/
    /* background-position-x: right; colocar al lado derecho*/
    display: flex;
    align-items: center;
    justify-content: space-between;
    flex-wrap: wrap;
  
  }
  
  .hero-image{
    /* arreglas las dimensiones originales de una imagen */
    object-fit: cover;
  }
  
  
  .portfolio {
    background: #fafafa;
    padding: 20px;
    /* background: red; */
  }
  
  .project {
    /* border-top: 10px solid red; borde en la parte superior
    border-right: 10px solid green borde derecho;
    border-left: 10px solid orange borde izquierdo;
    border-bottom: 10px solid pink; * borde inferior/
    /* color: blue;  */
    /* border-top-color: red borde completo;
    border-top-width: 15px ancho;
    border-top-style: solid;  estilo*/
    /* border: me coloca un border completo al navegador */
    border: 1px solid gray;
    /* borde rendondeado */
    border-radius: 10px;

    /* border-top-left-radius: 50px borde superior izquierda;
    border-top-right-radius: 10px;
    border-bottom-left-radius: 10px;
    border-bottom-right-radius: 10px; */
    /* margin: 10px; */

    margin-bottom: 15px;
    /* margin-right
    margin-left 
    margin-top */
    /* padding para todos los lados(relleno) */
    padding: 20px;
    background: #1b2127;
    color:white  ;
    display: flex;
    align-items: center;
    justify-content: space-between;
    flex-wrap: wrap;
  }
  .project-course,
  .project-date,
  .project-url {
    margin: 10px 0;
  }
  .project-description {
    font-size: 20px;
  }
  .project strong {
    font-family: 'Fjalla One', sans-serif;
  }
  /* .project-date {
    margin: 10px 0;
  } */
  
  .project-title {
    font-size: 30px;
    margin-top: 0;
    margin-bottom: 10px;
  }
  
  /* le asignamos un tamaño al div de 500 px */
  .project-details {
    width: 50%;
  }
  
  /* le asignamos un tamaño a la imagen de 500 px */
  .project-imageContainer {
    width: 50%;
  }
  .project-imageContainer img{
    max-width: 100%;
    
  }

  
  .header {
    background-color: #1b2127;
    color: white;
    /*  */
    display: flex;
    height: 70px;
    align-items: center;
    justify-content: space-between;
    flex-wrap: wrap;
  }
  
  ol,
  ul {
    margin: 0;
    padding: 0;
    list-style: none;
  }
  
  figure {
    margin: 0;
  }
  /* aplicando estilos a los enlaces */
  .header a {
    color: white;
    /* sacando las decoraciones */
    text-decoration: none;
  }
  .menu {
    /* inherit heredado */
    height: inherit;
  }
  .header ol {
    display: flex;
    height: inherit;
  }
  .header ol li {
    height: inherit;
  }
  .header a {
    display: flex;
    align-items: center;
    height: inherit;
    padding: 0 10px;
  }
  
  .flexbox {
    display: flex;
    /* flex-wrap: nowrap; */
    /*flex-wrap: wrap acomoda las cajas correctamente */
    flex-wrap: wrap;
    /* flex-direction: column; */
  }
  
  .box {
    width: 50px;
    height: 50px;
    /* margen entre cajas */
    margin: 5px;
    border: 1px solid red ;
  /* para que no se modifique los hijos */
    flex-shrink: 0;
  }
  
  .footer {
    color: white ;
    background-color: #1b2127;
    display: flex;
    /* centrar elementos */
    align-items: center;
    /* acomoda todas las cajas ,tambien espacio entre elementos */
    justify-content: space-between;
    flex-wrap: wrap;
  }
  
  .footer img {
    vertical-align: middle;
    height: 50px;
  }
  
  .footer a {
    color: white;
  }
  
  .event-list {
    display: flex;
    flex-wrap: wrap;
  }
  .event-list-title {
    margin-left: 20px;
  }
  .event { 
    margin: 1%;
    width: 48%;
    flex-shrink: 0;
    border-radius: 10px;
    /* genera scrolls */
    overflow: hidden;
    background: #f4fbff;
  }
  .event img {
    width: 480px;
    height: 200px;
    object-fit: cover;
  }
  .event-detail {
    margin: 20px 40px;
    margin-top: -40px;
    background-color: white;
    /* poner el elemento arriba de otro */
    position: relative;
    padding: 20px;
    text-align: center;
  }
  .event-description {
    text-align: left;
  }
  
  .event-url {
    color: #056fff;
    border: 1px solid;
    padding: 5px 20px;
    /* saca el subrayado */
    text-decoration: none;
    border-radius: 5px;
  }
  
  .contact {
    background-color: #056fff;
    color: white;
    height: 200px;
    display: flex;
    align-items: center;
    justify-content: space-between;
    flex-wrap: wrap;
  }
  
  .social{
    
   }
 
  .social-link {
    display: inline-block;
    width: 50px;
    height: 50px;
    margin: 0 10px;
    background-size: 50px 50px;
    
  }
  
  .social-link.twitter {
    background-image: url('../images/twitter.svg');
  }
  .social-link.facebook {
    background-image: url('../images/facebook.svg');
  }
  .social-link.github {
    background-image: url('../images/github.svg');
  }
  .social-link.instagram {
    background-image: url('../images/instagram.svg');
  }
  
  
  .form-email input {
    border-color: gray;
    border-style: solid;
    border-radius: 5px;
    padding: 10px 20px 10px 25px;
    background-image: url('../images/envelope.svg');
    background-size: 15px 15px;
    background-repeat: no-repeat;
    background-position-y: center;
    background-position-x: 5px;
  }
  
  .form-email button {
    display: block;
    background: transparent;
    color: white;
    padding: 10px 0;
    border-radius: 5px;
    width: 100px;
    margin-top: 10px;
  }
  
  .form-email h3 { 
    font-family: 'Source Sans Pro', sans-serif;
  }
  
  .container {
    /* border: 1px solid red; */
    max-width: 1000px;
    flex:1;
    margin: 0 auto;
    display: inherit;
    justify-content: inherit;
    align-items: inherit;
    height: inherit;
    flex-wrap: inherit;
  }

  /* desktop first hay que empezar primero desde el media query mas grande */

  @media screen and (max-width: 1024px){
    .container{
      padding: 0 1em;
    }
    .hero{
      height: auto;
      position: relative;
      overflow: hidden;
      padding: 2em;

    }
  
    .hero-image{
      position: absolute;
      z-index: 1;
      left: 0;
      right: 0;
      top: 0;
      bottom: 0;
      width: 100%;
    }

    h1{
      font-size: 2em;
      z-index: 2;
    }
  }
  
  @media screen and (max-width: 767px){

    
    .header{
      display: block;
      height: auto;

    }
    .header ol {
      display: block;

    }
    .header ol li{
      height: 50px;
    }
    .header a{
      justify-content: center;
    }
    .header .logo{
      text-align: center;
    }

    .project{
      display: block;
    }
    .project-imageContainer{
      width: auto;
      text-align: center;
    }
    .project-details{
      width: auto;
      /* font-size: 10px; */


    }
    .project-course,.project-date,.project-url{
      margin: .3em 0;
    }
    .project-title{
      font-size: 1.5em;
      margin-bottom: .3em;
    }
    .project-url{
      font-size: 1em;
    }
    .project-course{
      font-size: .8em;
    }
    .project-date{
      font-size: 1em;
    }
    .project-description{
      font-size: 1em;
    }
    .event{
      width: auto;
      flex-shrink: initial;
    }
    .event img{
      width: 100%;
    }
    


  }
  @media screen and (max-width: 480px){


    h1{
      font-size: 1.5em;
    }
    .project-details{
      width: auto;
      font-size: 12px;

    }

    .event-detail{
      margin: -2em .5em .5em;
      padding: 1em;
    }

    .contact{
      height: auto;
      padding: 1.5em 0;
      text-align: center;
      display: block;
      

    }
    .form-email button{
      margin: 1em auto;
    }
    .form-email h3{
      margin-top: 0;
    }
    .footer{
      display: block;
      text-align: center;
      border: 1px solid transparent;
    }
  
  }

  @media screen and (max-width: 320px){
    h1{
      font-size: 1.2em;
      background: rgba(0,0,0,.5);

    }
    .hero{
      padding: 2em 1em;
    }
  }